#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable" 
#pragma GCC diagnostic ignored "-Wformat"
#pragma GCC diagnostic ignored "-Wsign-compare"
//#pragma GCC optimize ("unroll-loops")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std ;

#define   Pi     2*acos(0.0)
#define   ll     long long
#define   pb     push_back
#define   mp     make_pair
#define   MAX    1000006
#define   MAX1   10000008
#define   mem(a,v)   memset(a,v,sizeof(a))
#define   lcm(a, b)        ((a)*((b)/__gcd(a,b)))
#define yes   cout<<"YES"<<endl
#define no   cout<<"NO"<<endl

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());	
template<class T> using oset=tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
// order_of_key returns the 0 based position of a value
// find_by_order returns a pointer pointing at the kth element 
// also 0 indexed
vector<int> v[27];
int arr[26][MAX];

int main ()
{
    
    ll a, b, c, d, n, m, k, l, p, q, r, t, x, y;
    ll cnt = 0, cntr = 0, sum = 0,ans = 1, check = 0;
    ll Max = 0, Min = 2e18;
    string s, s1, s2;

    freopen("H:/All study/Onedrive/1Programming/Facebook Hackercup/R3/perfectly_balanced_chapter_1_input.txt", "r", stdin);
    freopen("H:/All study/Onedrive/1Programming/Facebook Hackercup/R3/perfectly_balanced_chapter_1_output.txt", "w", stdout);
    
    cin >> t;

    while(t--){
        cin >> s;
        n = s.size();
        for(int i = 0; i < 26; i++){
            v[i].clear();
            for (int j = 0; j <= n + 2; j++) {
                arr[i][j] = 0;
            }
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 26; j++) {
                if (s[i - 1] - 97 == j) {
                    arr[j][i] = arr[j][i - 1] + 1;
                } 
                else arr[j][i] = arr[j][i - 1];
            }
            v[s[i - 1] - 97].pb(i);
        }
        for (int i = 0; i < 26; i++) {
            v[i].pb(INT_MAX);
        }
        
        cin >> q; ans = 0;
        for (int cs = 1; cs <= q; cs++) {
            cin >> l >> r; cntr = 0; int odd;
            if(r == l) {
                ans++;
                continue;
            }
            if ((r + l) % 2 == 1) continue;
            for (int i = 0; i < 26; i++) {
                a = arr[i][r] - arr[i][l - 1];
                if (a % 2){
                    cntr++;
                    odd = i;
                }
            }
            if (cntr > 1 or cntr == 0) {
                continue;
            }
            int mid = (r + l) / 2; check = 0; int ck = 0;
            a = *lower_bound(v[odd].begin(), v[odd].end(), l);
            if (a <= mid) {
                for (int i = 0; i < 26; i++) {
                    a = arr[i][mid] - arr[i][l - 1];
                    b = arr[i][r] - arr[i][mid];
                    if (i == odd){
                        a--;
                    }
                    if (a != b) {
                        check = 1; break;
                    }
                }
            }
            a = *lower_bound(v[odd].begin(), v[odd].end(), mid);
            if (a <= r) {
                for (int i = 0; i < 26; i++) {
                    a = arr[i][mid - 1] - arr[i][l - 1];
                    b = arr[i][r] - arr[i][mid - 1];
                    if (i == odd){
                        b--;
                    }
                    if (a != b) {
                        ck = 1; break;
                    }
                }
            }
            if (check == 0 or ck == 0 ) ans++;
            
        }
        cout <<"Case #"<<++cnt<<": "<<ans<<endl;
    }
    /* 
        precedence : ! * / % + - << >> 
        < > <= >= == != & ^ | && ||
        always check the limit and make sure that is correct.
        lcm of first 40 numbers  can be calculated.
        sqrt of 10^9 is 31622.
        always usee 1LL while doing binary operations.
    */

    return (0 - 0 + 1 -  1 * 1);
}
