{"id":747991122,"lang":"cpp","time":"3 weeks, 5 days","timestamp":1657910701,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/747991122/","is_pending":"Not Pending","title":"Max Area of Island","memory":"N/A","code":"class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int maxArea=0; //take maxArea is 0 initially\n        int rows=grid.length;  // no of rows in grid\n        int cols=grid[0].length;  // no of cols in grid\n        boolean visited[][]=new boolean[rows][cols];  //creating 2d boolean array\n        \n        for(int row=0;row<rows;row++){    // for loop for horizontal row of array\n            for(int col=0;col<cols;col++){  //for loop for cols of array\n                if(grid[row][col]==1 && !visited[row][col]){   //if box is 1 and it is non visited\n                    int currArea=dfs(grid,visited,row,col,rows,cols);  //then call dfs function and put that in currArea\n                    maxArea=Math.max(maxArea,currArea);   //finding maximum of currArea and maxArea\n                }\n            }\n        }\n        return maxArea;\n    }\n    \n    private int dfs(int grid[][],boolean visited[][],int row,int col,int rows,int cols){\n        if(row<0 || col<0 || row>=rows || col>=cols || visited[row][col] || grid[row][col]==0) \n            return 0;  //base conditions for recursion\n        \n        visited[row][col]=true;  //if th box is visited return true\n        \n        int currArea=1;    \n        //checking boxes up , down , left and right and adding in currArea\n        currArea+=dfs(grid,visited,row-1,col,rows,cols);\n        currArea+=dfs(grid,visited,row+1,col,rows,cols);\n        currArea+=dfs(grid,visited,row,col+1,rows,cols);\n        currArea+=dfs(grid,visited,row,col-1,rows,cols);\n        \n        return currArea;\n    }\n}","compare_result":null,"title_slug":"max-area-of-island"}