{"id":730237783,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1656087930,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/730237783/","is_pending":"Not Pending","title":"Construct Target Array With Multiple Sums","memory":"30 MB","code":"class Solution {\npublic:\n    bool isPossible(vector<int>& target) {\n        \n        //Priority queue for storing all the nums in taget in decreasing order.\n        priority_queue<int> pq;\n        long long sum = 0; //for storing total sum\n\n        for(auto num : target){ //adding the nums in pq and sum\n            pq.push(num);\n            sum+=num;\n        }\n        \n        //iterating untill all elements in pq become 1 (in turn pq.top() will also become 1);\n        while(pq.top() != 1){\n\n            sum -= pq.top(); //removing the greatest element as it was last upadted when converting [1,1,1...] array to target. So we are left with sum of other elements.\n            \n            //when there are elements greeter than 1 then sum of other elements can not be 0 or sum can not be greater than top element because sum + x(any number>0) is pq.top().\n            if(sum == 0 || sum >= pq.top()) return false;\n            \n            //if we delete all copies of sum from pq.top() we get an old element.\n            int old = pq.top() % sum;\n            \n            //all old elements were > 0 so it can not be 0 unless sum is 1 (This is only possible if array has only 2 elements)\n            if(sum != 1 && old == 0) return false;\n            \n            pq.pop();     //Deleting greatest element\n\n            pq.push(old); //Adding old element to restore array.\n            sum += old;   //Updating sum\n        }\n        \n        //if all elements are 1 then return true\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-target-array-with-multiple-sums"}