{"id":696315068,"lang":"cpp","time":"3Â months","timestamp":1652124021,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/696315068/","is_pending":"Not Pending","title":"Shortest Path to Get All Keys","memory":"N/A","code":"class Solution\n{\npublic:\n    int shortestPathAllKeys(vector<string>& grid)\n    {\n        int n=grid.size();\n        int m=grid[0].size();\n        int key=0;\n        int startx,starty;\n        for(int i=0; i<n; i++)\n        {\n            for(int j=0; j<m; j++)\n            {\n                if(grid[i][j]>='a'&&grid[i][j]<='z')\n                {\n                    int val=grid[i][j]-'a';\n                    key=max(key,val);\n                }\n                if(grid[i][j]=='@')\n                {\n                    startx=i;\n                    starty=j;\n                }\n            }\n        }\n        int mem[n+10][m+10][(1<<key+1)+10];\n        for(int i=0; i<=n; i++)\n        {\n            for(int j=0; j<=m; j++)\n            {\n                for(int k=0; k<(1<<key+1)+5; k++)\n                {\n                    mem[i][j][k]=-1;\n                }\n            }\n        }\n        int ans=999999;\n        queue<pair<pair<int,int>,int>>qu;\n        qu.push({{startx,starty},0});\n        int dx[]= {-1,1,0,0};\n        int dy[]= {0,0,-1,1};\n        grid[startx][starty]='.';\n        mem[startx][starty][0]=0;\n        while(!qu.empty())\n        {\n            pair<pair<int,int>,int> parent=qu.front();\n            qu.pop();\n            int x=parent.first.first;\n            int y=parent.first.second;\n            int mask=parent.second;\n            if(mask==(1<<(key+1))-1)\n            {\n                ans=min(ans,mem[x][y][mask]);\n                continue;\n            }\n            for(int i=0; i<4; i++)\n            {\n                int childx=x+dx[i];\n                int childy=y+dy[i];\n                if(childx>=0&&childx<n&&childy>=0&&childy<m)\n                {\n                    if(grid[childx][childy]!='#')\n                    {\n                        if(grid[childx][childy]=='.')\n                        {\n                            if(mem[childx][childy][mask]==-1)\n                            {\n                                mem[childx][childy][mask]=mem[x][y][mask]+1;\n                                qu.push({{childx,childy},mask});\n                            }\n                            else\n                            {\n                                if(mem[childx][childy][mask]>mem[x][y][mask]+1)\n                                {\n                                    mem[childx][childy][mask]=mem[x][y][mask]+1;\n                                    qu.push({{childx,childy},mask});\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if(grid[childx][childy]>='a'&&grid[childx][childy]<='z')\n                            {\n                                int val=grid[childx][childy]-'a';\n                                int new_mask=mask|(1<<val);\n                                if(mem[childx][childy][new_mask]==-1)\n                                {\n                                    mem[childx][childy][new_mask]=mem[x][y][mask]+1;\n                                    qu.push({{childx,childy},new_mask});\n                                }\n                                else\n                                {\n                                    if(mem[childx][childy][new_mask]>mem[x][y][mask]+1)\n                                    {\n                                        mem[childx][childy][new_mask]=mem[x][y][mask]+1;\n                                        qu.push({{childx,childy},new_mask});\n                                    }\n                                }\n                            }\n                            else\n                            {\n                                int val=grid[childx][childy]-'A';\n                                int ck=(mask&(1<<val));\n                                if(ck)\n                                {\n                                    if(mem[childx][childy][mask]==-1)\n                                    {\n                                        mem[childx][childy][mask]=mem[x][y][mask]+1;\n                                        qu.push({{childx,childy},mask});\n                                    }\n                                    else\n                                    {\n                                        if(mem[childx][childy][mask]>mem[x][y][mask]+1)\n                                        {\n                                            mem[childx][childy][mask]=mem[x][y][mask]+1;\n                                            qu.push({{childx,childy},mask});\n                                        }\n                                    }\n                                }\n                                if(mem[childx][childy][mask]==-1)\n                                {\n                                    mem[childx][childy][mask]=mem[x][y][mask]+1;\n                                    qu.push({{childx,childy},mask});\n                                }\n                                else\n                                {\n                                    if(mem[childx][childy][mask]>mem[x][y][mask]+1)\n                                    {\n                                        mem[childx][childy][mask]=mem[x][y][mask]+1;\n                                        qu.push({{childx,childy},mask});\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n","compare_result":"11010100001010101111111111111101111","title_slug":"shortest-path-to-get-all-keys"}