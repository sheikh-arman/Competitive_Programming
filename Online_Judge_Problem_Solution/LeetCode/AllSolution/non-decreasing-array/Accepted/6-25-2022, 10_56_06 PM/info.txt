{"id":731047158,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1656176166,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/731047158/","is_pending":"Not Pending","title":"Non-decreasing Array","memory":"27.1 MB","code":"class Solution {\npublic:\n    bool checkPossibility(vector<int>& nums) {\n        int cnt = 0; //to store the count of modifications                   \n        for(int i = 1; i < nums.size(); i++){\n\n            //decreasing sequence found\n            if(nums[i] < nums[i-1]){\n\n                //if count after increasing becomes more than 1 then false\n                if(++cnt > 1) return false;\n                \n                //in case of the 2nd element as i[1] < i[0] so make i[0] = i[1]\n                //if prev of prev element of curr is less than or equal to it then only the we can make it non decreasing by making the greater equal to lesser (prev = curr).\n                if(i == 1 || nums[i-2] <= nums[i])\n                    nums[i-1] = nums[i];    \n                \n                //if prev of prev is greater than curr then we have to make the lesser equal to greater (curr = prev)\n                else \n                    nums[i] = nums[i-1];\n            }\n        }\n        \n        //this command will only run if the loop is totally traversed and count <= 1 so return true.\n        return true;\n    } \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"non-decreasing-array"}