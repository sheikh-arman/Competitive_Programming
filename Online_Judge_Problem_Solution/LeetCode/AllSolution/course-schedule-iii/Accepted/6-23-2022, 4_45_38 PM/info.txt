{"id":729231002,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1655981138,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/729231002/","is_pending":"Not Pending","title":"Course Schedule III","memory":"56.2 MB","code":"class Solution {\npublic:\n \n\t// TIME COMPLEXITY:- O(NLOG(N))\n\t// SPACE COMPLEXITY:- O(N)\n \n    struct compare{\n        bool operator()(const vector<int>&i,const vector<int>&j){\n            return i[1] < j[1];\n        }\n    };\n \n    int scheduleCourse(vector<vector<int>>& courses)\n    {\n        // sort the given courses on the basis of last day to finish\n        sort(courses.begin(),courses.end(),compare());\n \n        int total_duration = 0;\n \n        // to store the courses duration\n        // courses that are taken\n        priority_queue<int> q;\n \n        for(int i=0;i<courses.size();i++)\n        {\n            int current_duration = courses[i][0];\n            int finish_time = courses[i][1];\n \n            // increment total duration\n \n            total_duration = total_duration + current_duration;\n \n            q.push(current_duration);\n \n            if(total_duration>finish_time){\n                // we want to skip this course \n                // or try to skip that course(which is already taken) which has maximum duration\n                //to maximize our result\n \n                total_duration-=q.top();\n                q.pop();\n            }\n        }\n \n        // size of the priority queue denotes the courses taken\n \n        return q.size();\n \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"course-schedule-iii"}