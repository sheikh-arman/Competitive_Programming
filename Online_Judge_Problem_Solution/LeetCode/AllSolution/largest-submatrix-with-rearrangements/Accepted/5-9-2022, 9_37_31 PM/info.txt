{"id":696185983,"lang":"cpp","time":"3Â months","timestamp":1652110651,"status_display":"Accepted","runtime":"300 ms","url":"/submissions/detail/696185983/","is_pending":"Not Pending","title":"Largest Submatrix With Rearrangements","memory":"82.6 MB","code":"class Solution {\npublic:\n    int largestSubmatrix(vector<vector<int>>& matrix) {\n        int n=matrix.size();\n        int m=matrix[0].size();\n        \n        int ar[n+2][m+2];\n        for(int i=0;i<m;i++){\n            ar[0][i]=matrix[0][i];\n        }\n        for(int i=1;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(matrix[i][j]==0){\n                    ar[i][j]=0;\n                }\n                else{\n                    ar[i][j]=ar[i-1][j]+1;\n                }\n            }\n        }\n        int ans=0;\n        for(int i=0;i<n;i++){\n            vector<int>V;\n            for(int j=0;j<m;j++){\n                if(ar[i][j])\n                V.push_back(ar[i][j]);\n            }\n            sort(V.begin(),V.end());\n            int siz=V.size();\n            for(int j=0;j<siz;j++){\n                int node=siz-j;\n                ans=max(ans,node*V[j]);\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"largest-submatrix-with-rearrangements"}