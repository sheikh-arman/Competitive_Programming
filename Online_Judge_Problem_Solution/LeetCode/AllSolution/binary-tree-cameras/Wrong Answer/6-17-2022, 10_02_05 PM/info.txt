{"id":724521149,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1655481725,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/724521149/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\ntypedef long long int ll;\nclass Solution {\npublic:\n    ll rec(TreeNode* root,ll status){\n        if(root==NULL){\n            return 0;\n        }\n        TreeNode* left=root->left;\n        TreeNode* right=root->right;\n        ll ans=(status==1);\n        ans+=rec(left,1-status);\n        ans+=rec(right,1-status);\n        return ans;\n    }\n    int minCameraCover(TreeNode* root) {\n        ll ans=rec(root,0);\n        ans=min(ans,rec(root,1));\n        if(root->left==NULL&&root->right==NULL)ans=1;\n        return (int)ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111100101000000011111111010011001001000000000110010100011000000000001000000100001001000000000000000000000000","title_slug":"binary-tree-cameras"}